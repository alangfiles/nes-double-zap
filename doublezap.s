;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_get_frame_count
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_gray_line
	.import		_zap_shoot
	.import		_zap_read
	.export		_frames_to_wait
	.export		_frames_to_read
	.export		_pad1_zapper
	.export		_zap1_ready
	.export		_zap1_hit_detected
	.export		_pad2_zapper
	.export		_zap2_ready
	.export		_zap2_hit_detected
	.export		_zap1_cooldown
	.export		_zap2_cooldown
	.export		_zap1_detected_in_wait
	.export		_zap2_detected_in_wait
	.export		_pad1
	.export		_pad1_new
	.export		_ball_x_direction
	.export		_ball_y_direction
	.export		_ball_active
	.export		_ball_x
	.export		_ball_y
	.export		_ball_x_speed
	.export		_ball_y_speed
	.export		_ball_wait
	.export		_player_1_score
	.export		_player_2_score
	.export		_temp1
	.export		_temp2
	.export		_trigger1_pulled
	.export		_trigger2_pulled
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_c_map
	.export		_move_ball
	.export		_new_ball
	.export		_read_input_triggers
	.export		_read_zapper_hits
	.export		_update_ball_movement
	.export		_update_cooldown
	.export		_draw_box
	.export		_draw_ball
	.export		_draw_bg
	.export		_draw_score
	.export		_draw_cooldown
	.export		_level
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles
	.export		_Ball
	.export		_SmallBall
	.export		_LargeBall
	.export		_SmallBox
	.export		_MediumBox
	.export		_LargeBox
	.export		_main

.segment	"DATA"

_frames_to_wait:
	.byte	$00
_frames_to_read:
	.byte	$0A
_zap1_cooldown:
	.byte	$00
_zap2_cooldown:
	.byte	$00
_zap1_detected_in_wait:
	.byte	$00
_zap2_detected_in_wait:
	.byte	$00
_ball_y_direction:
	.byte	$00
_ball_wait:
	.byte	$00
_player_1_score:
	.byte	$00
_player_2_score:
	.byte	$00
_index:
	.byte	$00

.segment	"RODATA"

_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$2C
	.byte	$1B
	.byte	$17
	.byte	$11
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$2A
	.byte	$1B
	.byte	$05
	.byte	$38
	.byte	$3D
_palette_sp:
	.byte	$1B
	.byte	$37
	.byte	$24
	.byte	$17
	.byte	$1B
	.byte	$36
	.byte	$12
	.byte	$16
	.byte	$1B
	.byte	$17
	.byte	$21
	.byte	$37
	.byte	$1B
	.byte	$2D
	.byte	$3D
	.byte	$37
_metatiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
_Ball:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$14
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$24
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$32
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$33
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$34
	.byte	$02
	.byte	$80
_SmallBall:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$01
	.byte	$80
_LargeBall:
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$25
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$27
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$35
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$36
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$37
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$38
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$45
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$46
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$47
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$48
	.byte	$03
	.byte	$80
_SmallBox:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$03
	.byte	$80
_MediumBox:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$53
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$54
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$64
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$72
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$73
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$74
	.byte	$03
	.byte	$80
_LargeBox:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$57
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$58
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$65
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$67
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$68
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$76
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$77
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$78
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$85
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$86
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$87
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$88
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1_zapper:
	.res	1,$00
_zap1_ready:
	.res	1,$00
_zap1_hit_detected:
	.res	1,$00
_pad2_zapper:
	.res	1,$00
_zap2_ready:
	.res	1,$00
_zap2_hit_detected:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_ball_x_direction:
	.res	1,$00
_ball_active:
	.res	1,$00
_ball_x:
	.res	2,$00
_ball_y:
	.res	2,$00
_ball_x_speed:
	.res	2,$00
_ball_y_speed:
	.res	2,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_trigger1_pulled:
	.res	1,$00
_trigger2_pulled:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ move_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_ball: near

.segment	"CODE"

;
; if (ball_y > TOP_BOUNDARY)
;
	lda     _ball_y
	cmp     #$01
	lda     _ball_y+1
	sbc     #$B0
	bcc     L02B5
;
; ball_y_direction = GOING_UP;
;
	lda     #$00
	sta     _ball_y_direction
;
; if (ball_y < BOTTOM_BOUNDARY)
;
L02B5:	ldx     _ball_y+1
	cpx     #$20
	bcs     L02B9
;
; ball_y_direction = GOING_DOWN;
;
	lda     #$01
	sta     _ball_y_direction
;
; if (ball_x_direction == GOING_LEFT)
;
L02B9:	lda     _ball_x_direction
	bne     L02BD
;
; ball_x -= ball_x_speed;
;
	lda     _ball_x_speed
	eor     #$FF
	sec
	adc     _ball_x
	sta     _ball_x
	lda     _ball_x_speed+1
	eor     #$FF
;
; else
;
	jmp     L03A2
;
; ball_x += ball_x_speed;
;
L02BD:	lda     _ball_x_speed
	clc
	adc     _ball_x
	sta     _ball_x
	lda     _ball_x_speed+1
L03A2:	adc     _ball_x+1
	sta     _ball_x+1
;
; if (ball_y_direction == GOING_UP)
;
	lda     _ball_y_direction
	bne     L02C4
;
; ball_y -= ball_y_speed;
;
	lda     _ball_y_speed
	eor     #$FF
	sec
	adc     _ball_y
	sta     _ball_y
	lda     _ball_y_speed+1
	eor     #$FF
;
; else
;
	jmp     L03A3
;
; ball_y += ball_y_speed;
;
L02C4:	lda     _ball_y_speed
	clc
	adc     _ball_y
	sta     _ball_y
	lda     _ball_y_speed+1
L03A3:	adc     _ball_y+1
	sta     _ball_y+1
;
; if (ball_x < LEFT_BOUNDARY)
;
	ldx     _ball_x+1
	cpx     #$05
	bcs     L02CB
;
; ++player_1_score;
;
	inc     _player_1_score
;
; ball_active = 0;
;
	lda     #$00
	sta     _ball_active
;
; ball_wait = 20;
;
	lda     #$14
	sta     _ball_wait
;
; zap1_cooldown = 0;
;
	lda     #$00
	sta     _zap1_cooldown
;
; zap2_cooldown = 0;
;
	sta     _zap2_cooldown
;
; if (ball_x > RIGHT_BOUNDARY)
;
L02CB:	lda     _ball_x
	cmp     #$01
	lda     _ball_x+1
	sbc     #$E0
	bcc     L02D6
;
; ++player_2_score;
;
	inc     _player_2_score
;
; ball_active = 0;
;
	lda     #$00
	sta     _ball_active
;
; ball_wait = 20;
;
	lda     #$14
	sta     _ball_wait
;
; zap1_cooldown = 0;
;
	lda     #$00
	sta     _zap1_cooldown
;
; zap2_cooldown = 0;
;
	sta     _zap2_cooldown
;
; }
;
L02D6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_ball: near

.segment	"CODE"

;
; ball_active = 1;
;
	lda     #$01
	sta     _ball_active
;
; ball_x = MIDDLE_SCREEN; // should give 0x4000-0xbf80
;
	ldx     #$70
	lda     #$00
	sta     _ball_x
	stx     _ball_x+1
;
; ball_y = MIDDLE_SCREEN; // int
;
	sta     _ball_y
	stx     _ball_y+1
;
; ball_x_speed = DEFAULT_X_SPEED; // 0 is stopped, 400 is fast
;
	ldx     #$01
	lda     #$2C
	sta     _ball_x_speed
	stx     _ball_x_speed+1
;
; ball_y_speed = DEFAULT_Y_SPEED;
;
	dex
	lda     #$C8
	sta     _ball_y_speed
	stx     _ball_y_speed+1
;
; switch (get_frame_count() & 0b00000011)
;
	jsr     _get_frame_count
	and     #$03
;
; }
;
	beq     L03A5
	cmp     #$01
	beq     L03A6
	cmp     #$02
	beq     L03A7
	cmp     #$03
	beq     L03A8
	rts
;
; ball_x_direction = GOING_LEFT;
;
L03A5:	sta     _ball_x_direction
;
; ball_y_direction = GOING_UP;
;
	sta     _ball_y_direction
;
; break;
;
	rts
;
; ball_x_direction = GOING_LEFT;
;
L03A6:	lda     #$00
	sta     _ball_x_direction
;
; ball_y_direction = GOING_DOWN;
;
	lda     #$01
	sta     _ball_y_direction
;
; break;
;
	rts
;
; ball_x_direction = GOING_RIGHT;
;
L03A7:	lda     #$01
	sta     _ball_x_direction
;
; ball_y_direction = GOING_DOWN;
;
	sta     _ball_y_direction
;
; break;
;
	rts
;
; ball_x_direction = GOING_RIGHT;
;
L03A8:	lda     #$01
	sta     _ball_x_direction
;
; ball_y_direction = GOING_UP;
;
	lda     #$00
	sta     _ball_y_direction
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_input_triggers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input_triggers: near

.segment	"CODE"

;
; trigger1_pulled = 0;
;
	lda     #$00
	sta     _trigger1_pulled
;
; trigger2_pulled = 0;
;
	sta     _trigger2_pulled
;
; zap1_ready = pad1_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad1_zapper
	eor     #$01
	sta     _zap1_ready
;
; zap2_ready = pad2_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad2_zapper
	eor     #$01
	sta     _zap2_ready
;
; pad1_zapper = zap_shoot(0); // controller slot 1
;
	lda     #$00
	jsr     _zap_shoot
	sta     _pad1_zapper
;
; pad2_zapper = zap_shoot(1); // controller slot 2
;
	lda     #$01
	jsr     _zap_shoot
	sta     _pad2_zapper
;
; if ((pad1_zapper == 1) && (zap1_ready) && zap1_cooldown == 0)
;
	lda     _pad1_zapper
	cmp     #$01
	bne     L03AC
	lda     _zap1_ready
	beq     L03AC
	lda     _zap1_cooldown
	bne     L03AC
;
; trigger1_pulled = 1;
;
	lda     #$01
	sta     _trigger1_pulled
;
; zap1_cooldown = MAX_COOLDOWN;
;
	lda     #$20
	sta     _zap1_cooldown
;
; if ((pad2_zapper == 1) && (zap2_ready) && zap2_cooldown == 0)
;
L03AC:	lda     _pad2_zapper
	cmp     #$01
	bne     L03AE
	lda     _zap2_ready
	beq     L03AE
	lda     _zap2_cooldown
	beq     L03AF
L03AE:	rts
;
; trigger2_pulled = 1;
;
L03AF:	lda     #$01
	sta     _trigger2_pulled
;
; zap2_cooldown = MAX_COOLDOWN;
;
	lda     #$20
	sta     _zap2_cooldown
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_zapper_hits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_zapper_hits: near

.segment	"CODE"

;
; if (trigger1_pulled == 1)
;
	lda     _trigger1_pulled
	cmp     #$01
	bne     L03B0
;
; zap1_hit_detected = zap_read(0); // look for light in zapper, port 1
;
	lda     #$00
	jsr     _zap_read
	sta     _zap1_hit_detected
;
; if (trigger2_pulled == 1)
;
L03B0:	lda     _trigger2_pulled
	cmp     #$01
	bne     L02AF
;
; zap2_hit_detected = zap_read(1); // look for light in zapper, port 2
;
	jsr     _zap_read
	sta     _zap2_hit_detected
;
; }
;
L02AF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_ball_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_ball_movement: near

.segment	"CODE"

;
; if (zap1_detected_in_wait == 1)
;
	lda     _zap1_detected_in_wait
	cmp     #$01
	bne     L03B1
;
; ball_x_direction = GOING_RIGHT;
;
	sta     _ball_x_direction
;
; if (zap2_detected_in_wait == 1)
;
L03B1:	lda     _zap2_detected_in_wait
	cmp     #$01
	bne     L0273
;
; ball_x_direction = GOING_LEFT;
;
	lda     #$00
	sta     _ball_x_direction
;
; if (zap1_hit_detected || zap2_hit_detected) // if it's hit update the speed
;
L0273:	lda     _zap1_hit_detected
	bne     L03B2
	lda     _zap2_hit_detected
	bne     L03B2
	rts
;
; ball_x_speed += DEFAULT_SPEED_STEP;
;
L03B2:	lda     #$28
	clc
	adc     _ball_x_speed
	sta     _ball_x_speed
	bcc     L027C
	inc     _ball_x_speed+1
;
; if (get_frame_count() & 0x01 == 1)
;
L027C:	jsr     _get_frame_count
	and     #$01
	beq     L027D
;
; ball_y_speed -= DEFAULT_SPEED_STEP / 4;
;
	lda     _ball_y_speed
	sec
	sbc     #$0A
	sta     _ball_y_speed
	bcs     L0285
	dec     _ball_y_speed+1
;
; else
;
	rts
;
; ball_y_speed += DEFAULT_SPEED_STEP;
;
L027D:	lda     #$28
	clc
	adc     _ball_y_speed
	sta     _ball_y_speed
	bcc     L0285
	inc     _ball_y_speed+1
;
; }
;
L0285:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cooldown: near

.segment	"CODE"

;
; if (zap1_cooldown > 0)
;
	lda     _zap1_cooldown
	beq     L03B3
;
; --zap1_cooldown;
;
	dec     _zap1_cooldown
;
; if (zap2_cooldown > 0)
;
L03B3:	lda     _zap2_cooldown
	beq     L026B
;
; --zap2_cooldown;
;
	dec     _zap2_cooldown
;
; }
;
L026B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_box (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_box: near

.segment	"CODE"

;
; temp1 = high_byte(ball_x);
;
	lda     _ball_x+1
	sta     _temp1
;
; temp2 = high_byte(ball_y);
;
	lda     _ball_y+1
	sta     _temp2
;
; oam_meta_spr(temp1 - 4, temp2 - 4, LargeBox);
;
	jsr     decsp2
	lda     _temp1
	sec
	sbc     #$04
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	sec
	sbc     #$04
	dey
	sta     (sp),y
	lda     #<(_LargeBox)
	ldx     #>(_LargeBox)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_ball: near

.segment	"CODE"

;
; temp1 = high_byte(ball_x);
;
	lda     _ball_x+1
	sta     _temp1
;
; temp2 = high_byte(ball_y);
;
	lda     _ball_y+1
	sta     _temp2
;
; oam_meta_spr(temp1, temp2, LargeBall);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_LargeBall)
	ldx     #>(_LargeBall)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; set_data_pointer(level);
;
	lda     #<(_level)
	ldx     #>(_level)
	jsr     _set_data_pointer
;
; memcpy(c_map, level, 240);
;
	ldy     #$00
L032B:	lda     _level,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L032B
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L03B6:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L03B5:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L03B7
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L03B5
;
; if (y == 0xe0)
;
L03B7:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L032D
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L03B6
;
; ppu_on_all();
;
L032D:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_score: near

.segment	"CODE"

;
; one_vram_buffer(player_1_score + 48, NTADR_A(3, 2));
;
	lda     _player_1_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$43
	jsr     _one_vram_buffer
;
; one_vram_buffer(player_2_score + 48, NTADR_A(26, 2));
;
	lda     _player_2_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$5A
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cooldown: near

.segment	"CODE"

;
; index = 0;
;
	lda     #$00
	sta     _index
;
; temp1 = zap1_cooldown >> 2;
;
	lda     _zap1_cooldown
	lsr     a
	lsr     a
	ldx     #$00
	sta     _temp1
;
; while (index < MAX_COOLDOWN >> 2)
;
	jmp     L03BB
;
; if (index < temp1)
;
L03BA:	lda     _index
	cmp     _temp1
	txa
	sbc     #$00
	bcs     L036A
;
; one_vram_buffer('l', NTADR_A(3 + index, 26));
;
	lda     #$6C
;
; else
;
	jmp     L03DD
;
; one_vram_buffer(' ', NTADR_A(3 + index, 26));
;
L036A:	lda     #$20
L03DD:	jsr     pusha
	lda     _index
	clc
	adc     #$03
	bcc     L037E
	ldx     #$01
L037E:	ora     #$40
	pha
	txa
	ora     #$03
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; index += 1;
;
	inc     _index
;
; while (index < MAX_COOLDOWN >> 2)
;
	ldx     #$00
L03BB:	lda     _index
	cmp     #$08
	bcc     L03BA
;
; index = 0;
;
	stx     _index
;
; temp1 = zap2_cooldown >> 2;
;
	lda     _zap2_cooldown
	lsr     a
	lsr     a
	sta     _temp1
;
; while (index < MAX_COOLDOWN >> 2)
;
	jmp     L03BD
;
; if (index < temp1)
;
L03BC:	lda     _index
	cmp     _temp1
	txa
	sbc     #$00
	bcs     L0389
;
; one_vram_buffer('l', NTADR_A(26 - index, 26));
;
	lda     #$6C
;
; else
;
	jmp     L03E1
;
; one_vram_buffer(' ', NTADR_A(26 - index, 26));
;
L0389:	lda     #$20
L03E1:	jsr     pusha
	lda     #$1A
	sec
	sbc     _index
	pha
	txa
	sbc     #$00
	tax
	pla
	ora     #$40
	pha
	txa
	ora     #$03
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; index += 1;
;
	inc     _index
;
; while (index < MAX_COOLDOWN >> 2)
;
	ldx     #$00
L03BD:	lda     _index
	cmp     #$08
	bcc     L03BC
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);  // load the palette
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp); // load the palette
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_vram_buffer();  // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE) // gameloop
;
	jmp     L03E2
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L022E:	jsr     _ppu_wait_nmi
;
; draw_bg();
;
	jsr     _draw_bg
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; while (game_mode == MODE_TITLE) // gameloop
;
L03E2:	lda     _game_mode
	beq     L022E
;
; while (game_mode == MODE_GAME) // gameloop
;
	jmp     L03E4
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0236:	jsr     _ppu_wait_nmi
;
; zap1_hit_detected = 0;
;
	lda     #$00
	sta     _zap1_hit_detected
;
; zap2_hit_detected = 0;
;
	sta     _zap2_hit_detected
;
; oam_clear();
;
	jsr     _oam_clear
;
; read_input_triggers();
;
	jsr     _read_input_triggers
;
; draw_score();
;
	jsr     _draw_score
;
; update_cooldown();
;
	jsr     _update_cooldown
;
; draw_cooldown();
;
	jsr     _draw_cooldown
;
; if (ball_active)
;
	lda     _ball_active
	beq     L0244
;
; move_ball();
;
	jsr     _move_ball
;
; draw_ball();
;
	jsr     _draw_ball
;
; if (trigger1_pulled || trigger2_pulled)
;
	lda     _trigger1_pulled
	bne     L0249
	lda     _trigger2_pulled
	beq     L0264
;
; zap1_detected_in_wait = 0;
;
L0249:	lda     #$00
	sta     _zap1_detected_in_wait
;
; zap2_detected_in_wait = 0;
;
	sta     _zap2_detected_in_wait
;
; index = 0;
;
	sta     _index
;
; while (index < frames_to_read)
;
	jmp     L03E3
;
; read_zapper_hits();
;
L0251:	jsr     _read_zapper_hits
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; move_ball();
;
	jsr     _move_ball
;
; draw_ball();
;
	jsr     _draw_ball
;
; ++index;
;
	inc     _index
;
; zap1_detected_in_wait = zap1_detected_in_wait | zap1_hit_detected;
;
	lda     _zap1_hit_detected
	ora     _zap1_detected_in_wait
	sta     _zap1_detected_in_wait
;
; zap2_detected_in_wait = zap2_detected_in_wait | zap2_hit_detected;
;
	lda     _zap2_hit_detected
	ora     _zap2_detected_in_wait
	sta     _zap2_detected_in_wait
;
; while (index < frames_to_read)
;
L03E3:	lda     _index
	cmp     _frames_to_read
	bcc     L0251
;
; update_ball_movement(); // based off zapper hit data
;
	jsr     _update_ball_movement
;
; else if (ball_wait)
;
	jmp     L0264
L0244:	lda     _ball_wait
	beq     L0261
;
; --ball_wait;
;
	dec     _ball_wait
;
; else
;
	jmp     L0264
;
; new_ball();
;
L0261:	jsr     _new_ball
;
; gray_line();
;
L0264:	jsr     _gray_line
;
; while (game_mode == MODE_GAME) // gameloop
;
L03E4:	lda     _game_mode
	cmp     #$01
	jeq     L0236
;
; while (1)
;
	jmp     L03E2

.endproc

