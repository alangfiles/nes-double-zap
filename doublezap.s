;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_get_frame_count
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_gray_line
	.import		_zap_shoot
	.import		_zap_read
	.export		_frames_to_wait
	.export		_frames_to_read
	.export		_pad1_zapper
	.export		_zap1_ready
	.export		_zap1_hit_detected
	.export		_pad2_zapper
	.export		_zap2_ready
	.export		_zap2_hit_detected
	.export		_zap1_cooldown
	.export		_zap2_cooldown
	.export		_zap1_detected_in_wait
	.export		_zap2_detected_in_wait
	.export		_number_of_balls_active
	.export		_ball_index_hit
	.export		_pointer
	.export		_pointer2
	.export		_balls_x
	.export		_balls_y
	.export		_balls_x_speed
	.export		_balls_y_speed
	.export		_balls_x_direction
	.export		_balls_y_direction
	.export		_balls_active
	.export		_balls_hits
	.export		_balls_type
	.export		_Generic
	.export		_pad1
	.export		_pad1_new
	.export		_player_1_score
	.export		_player_2_score
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_trigger1_pulled
	.export		_trigger2_pulled
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_index2
	.export		_offset
	.export		_shuffle_array
	.export		_c_map
	.export		_move_ball
	.export		_move_balls
	.export		_new_ball
	.export		_read_input_triggers
	.export		_read_zapper_hits
	.export		_handle_ball_hit
	.export		_update_cooldown
	.export		_draw_box
	.export		_draw_ball
	.export		_draw_balls
	.export		_draw_bg
	.export		_draw_score
	.export		_draw_cooldown
	.export		_trigger_pulled
	.export		_clear_balls_and_hits
	.export		_level
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles
	.export		_SmallBall
	.export		_MediumBall
	.export		_LargeBall
	.export		_SmallBox
	.export		_MediumBox
	.export		_LargeBox
	.export		_main

.segment	"DATA"

_frames_to_wait:
	.byte	$00
_frames_to_read:
	.byte	$0A
_zap1_cooldown:
	.byte	$00
_zap2_cooldown:
	.byte	$00
_zap1_detected_in_wait:
	.byte	$00
_zap2_detected_in_wait:
	.byte	$00
_number_of_balls_active:
	.byte	$00
_ball_index_hit:
	.byte	$FE
_player_1_score:
	.byte	$00
_player_2_score:
	.byte	$00
_index:
	.byte	$00
_index2:
	.byte	$00

.segment	"RODATA"

_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$2C
	.byte	$1B
	.byte	$17
	.byte	$11
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$2A
	.byte	$1B
	.byte	$05
	.byte	$38
	.byte	$3D
_palette_sp:
	.byte	$1B
	.byte	$37
	.byte	$24
	.byte	$17
	.byte	$1B
	.byte	$36
	.byte	$12
	.byte	$16
	.byte	$1B
	.byte	$17
	.byte	$21
	.byte	$37
	.byte	$1B
	.byte	$2D
	.byte	$3D
	.byte	$37
_metatiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
_SmallBall:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$01
	.byte	$80
_MediumBall:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$14
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$24
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$32
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$33
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$34
	.byte	$02
	.byte	$80
_LargeBall:
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$25
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$27
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$35
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$36
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$37
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$38
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$45
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$46
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$47
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$48
	.byte	$03
	.byte	$80
_SmallBox:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$03
	.byte	$80
_MediumBox:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$53
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$54
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$64
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$72
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$73
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$74
	.byte	$03
	.byte	$80
_LargeBox:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$57
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$58
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$65
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$67
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$68
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$76
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$77
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$78
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$85
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$86
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$87
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$88
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1_zapper:
	.res	1,$00
_zap1_ready:
	.res	1,$00
_zap1_hit_detected:
	.res	1,$00
_pad2_zapper:
	.res	1,$00
_zap2_ready:
	.res	1,$00
_zap2_hit_detected:
	.res	1,$00
_pointer:
	.res	2,$00
_pointer2:
	.res	2,$00
_balls_x:
	.res	8,$00
_balls_y:
	.res	8,$00
_balls_x_speed:
	.res	8,$00
_balls_y_speed:
	.res	8,$00
_balls_x_direction:
	.res	4,$00
_balls_y_direction:
	.res	4,$00
_balls_active:
	.res	4,$00
_balls_hits:
	.res	4,$00
_balls_type:
	.res	4,$00
_Generic:
	.res	4,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_trigger1_pulled:
	.res	1,$00
_trigger2_pulled:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_offset:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ move_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_ball: near

.segment	"CODE"

;
; if (balls_y[index] > TOP_BOUNDARY)
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04EE
	inx
	clc
L04EE:	adc     #<(_balls_y)
	sta     ptr1
	txa
	adc     #>(_balls_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$B0
	ldx     #$00
	bcc     L0500
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	txa
	sta     _balls_y_direction,y
;
; if (balls_y[index] < BOTTOM_BOUNDARY)
;
L0500:	lda     _index
	asl     a
	bcc     L04EF
	inx
	clc
L04EF:	adc     #<(_balls_y)
	sta     ptr1
	txa
	adc     #>(_balls_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	cpx     #$20
	bcs     L0367
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	lda     #$01
	sta     _balls_y_direction,y
;
; if (balls_x_speed[index] > 0)
;
L0367:	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F0
	inx
	clc
L04F0:	adc     #<(_balls_x_speed)
	sta     ptr1
	txa
	adc     #>(_balls_x_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L0505
	cmp     #$00
	beq     L0509
;
; balls_x_speed[index] = balls_x_speed[index] - DEFAULT_SPEED_STEP_DOWN;
;
L0505:	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F1
	inx
	clc
L04F1:	adc     #<(_balls_x_speed)
	sta     sreg
	txa
	adc     #>(_balls_x_speed)
	sta     sreg+1
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F2
	inx
	clc
L04F2:	adc     #<(_balls_x_speed)
	sta     ptr1
	txa
	adc     #>(_balls_x_speed)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sec
	sbc     #$05
	bcs     L0501
	dex
L0501:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if (balls_y_speed[index] > 0)
;
	ldx     #$00
L0509:	lda     _index
	asl     a
	bcc     L04F3
	inx
	clc
L04F3:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L0506
	cmp     #$00
	beq     L0377
;
; balls_y_speed[index] = balls_y_speed[index] - DEFAULT_SPEED_STEP_DOWN;
;
L0506:	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F4
	inx
	clc
L04F4:	adc     #<(_balls_y_speed)
	sta     sreg
	txa
	adc     #>(_balls_y_speed)
	sta     sreg+1
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F5
	inx
	clc
L04F5:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sec
	sbc     #$05
	bcs     L0502
	dex
L0502:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if (balls_x_direction[index] == GOING_LEFT)
;
L0377:	ldy     _index
	ldx     #$00
	lda     _balls_x_direction,y
	bne     L0503
;
; balls_x[index] -= balls_x_speed[index];
;
	lda     _index
	asl     a
	bcc     L04F6
	inx
	clc
L04F6:	adc     #<(_balls_x)
	tay
	txa
	adc     #>(_balls_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F7
	inx
	clc
L04F7:	adc     #<(_balls_x_speed)
	sta     ptr1
	txa
	adc     #>(_balls_x_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
;
; else
;
	jmp     L0507
;
; balls_x[index] += balls_x_speed[index];
;
L0503:	lda     _index
	asl     a
	bcc     L04F8
	inx
	clc
L04F8:	adc     #<(_balls_x)
	tay
	txa
	adc     #>(_balls_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04F9
	inx
	clc
L04F9:	adc     #<(_balls_x_speed)
	sta     ptr1
	txa
	adc     #>(_balls_x_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
L0507:	ldy     #$00
	jsr     staxspidx
;
; if (balls_y_direction[index] == GOING_UP)
;
	ldy     _index
	ldx     #$00
	lda     _balls_y_direction,y
	bne     L0504
;
; balls_y[index] -= balls_y_speed[index];
;
	lda     _index
	asl     a
	bcc     L04FA
	inx
	clc
L04FA:	adc     #<(_balls_y)
	tay
	txa
	adc     #>(_balls_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04FB
	inx
	clc
L04FB:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
;
; else
;
	jmp     L0508
;
; balls_y[index] += balls_y_speed[index];
;
L0504:	lda     _index
	asl     a
	bcc     L04FC
	inx
	clc
L04FC:	adc     #<(_balls_y)
	tay
	txa
	adc     #>(_balls_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04FD
	inx
	clc
L04FD:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
L0508:	ldy     #$00
	jsr     staxspidx
;
; if (balls_x[index] < LEFT_BOUNDARY)
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L04FE
	inx
	clc
L04FE:	adc     #<(_balls_x)
	sta     ptr1
	txa
	adc     #>(_balls_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$05
	bcs     L039A
;
; ++player_1_score;
;
	inc     _player_1_score
;
; balls_type[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _balls_type,y
;
; zap1_cooldown = 0;
;
	lda     #$00
	sta     _zap1_cooldown
;
; zap2_cooldown = 0;
;
	sta     _zap2_cooldown
;
; if (balls_x[index] > RIGHT_BOUNDARY)
;
L039A:	ldx     #$00
	lda     _index
	asl     a
	bcc     L04FF
	inx
	clc
L04FF:	adc     #<(_balls_x)
	sta     ptr1
	txa
	adc     #>(_balls_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$E0
	bcc     L03A6
;
; ++player_2_score;
;
	inc     _player_2_score
;
; balls_type[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _balls_type,y
;
; zap1_cooldown = 0;
;
	lda     #$00
	sta     _zap1_cooldown
;
; zap2_cooldown = 0;
;
	sta     _zap2_cooldown
;
; }
;
L03A6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_balls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_balls: near

.segment	"CODE"

;
; for (index = 0; index < MAX_BALLS; ++index)
;
	lda     #$00
	sta     _index
L050A:	lda     _index
	cmp     #$04
	bcs     L0353
;
; if (balls_type[index] == TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
;
; continue; // we found an empty spot
;
	beq     L050B
;
; move_ball();
;
	jsr     _move_ball
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L050B:	inc     _index
	jmp     L050A
;
; }
;
L0353:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_ball: near

.segment	"CODE"

;
; clear_balls_and_hits();
;
	jsr     _clear_balls_and_hits
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; balls_type[index] = LARGE_BALL;
;
	ldy     _index
	lda     #$02
	sta     _balls_type,y
;
; balls_x[index] = MIDDLE_SCREEN;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0510
	inx
	clc
L0510:	adc     #<(_balls_x)
	sta     ptr1
	txa
	adc     #>(_balls_x)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	lda     #$70
	sta     (ptr1),y
;
; balls_y[index] = MIDDLE_SCREEN;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0511
	inx
	clc
L0511:	adc     #<(_balls_y)
	sta     ptr1
	txa
	adc     #>(_balls_y)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	lda     #$70
	sta     (ptr1),y
;
; balls_x_speed[index] = DEFAULT_X_SPEED;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0512
	inx
	clc
L0512:	adc     #<(_balls_x_speed)
	sta     ptr1
	txa
	adc     #>(_balls_x_speed)
	sta     ptr1+1
	lda     #$2C
	dey
	sta     (ptr1),y
	iny
	tya
	sta     (ptr1),y
;
; balls_y_speed[index] = DEFAULT_Y_SPEED;
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0513
	inx
	clc
L0513:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	lda     #$C8
	dey
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; switch (get_frame_count() & 0b00000011)
;
	jsr     _get_frame_count
	and     #$03
;
; }
;
	beq     L03DB
	cmp     #$01
	beq     L03E5
	cmp     #$02
	beq     L03EF
	cmp     #$03
	beq     L03F9
	rts
;
; balls_x_direction[index] = GOING_LEFT;
;
L03DB:	ldy     _index
	lda     #$00
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	sta     _balls_y_direction,y
;
; break;
;
	rts
;
; balls_x_direction[index] = GOING_LEFT;
;
L03E5:	ldy     _index
	lda     #$00
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	lda     #$01
	sta     _balls_y_direction,y
;
; break;
;
	rts
;
; balls_x_direction[index] = GOING_RIGHT;
;
L03EF:	ldy     _index
	lda     #$01
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	sta     _balls_y_direction,y
;
; break;
;
	rts
;
; balls_x_direction[index] = GOING_RIGHT;
;
L03F9:	ldy     _index
	lda     #$01
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	lda     #$00
	sta     _balls_y_direction,y
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_input_triggers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input_triggers: near

.segment	"CODE"

;
; trigger1_pulled = 0;
;
	lda     #$00
	sta     _trigger1_pulled
;
; trigger2_pulled = 0;
;
	sta     _trigger2_pulled
;
; zap1_ready = pad1_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad1_zapper
	eor     #$01
	sta     _zap1_ready
;
; zap2_ready = pad2_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad2_zapper
	eor     #$01
	sta     _zap2_ready
;
; pad1_zapper = zap_shoot(0); // controller slot 1
;
	lda     #$00
	jsr     _zap_shoot
	sta     _pad1_zapper
;
; pad2_zapper = zap_shoot(1); // controller slot 2
;
	lda     #$01
	jsr     _zap_shoot
	sta     _pad2_zapper
;
; if ((pad1_zapper == 1) && (zap1_ready) && zap1_cooldown == 0)
;
	lda     _pad1_zapper
	cmp     #$01
	bne     L0517
	lda     _zap1_ready
	beq     L0517
	lda     _zap1_cooldown
	bne     L0517
;
; trigger1_pulled = 1;
;
	lda     #$01
	sta     _trigger1_pulled
;
; zap1_cooldown = MAX_COOLDOWN;
;
	lda     #$08
	sta     _zap1_cooldown
;
; if ((pad2_zapper == 1) && (zap2_ready) && zap2_cooldown == 0)
;
L0517:	lda     _pad2_zapper
	cmp     #$01
	bne     L0519
	lda     _zap2_ready
	beq     L0519
	lda     _zap2_cooldown
	beq     L051A
L0519:	rts
;
; trigger2_pulled = 1;
;
L051A:	lda     #$01
	sta     _trigger2_pulled
;
; zap2_cooldown = MAX_COOLDOWN;
;
	lda     #$08
	sta     _zap2_cooldown
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_zapper_hits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_zapper_hits: near

.segment	"CODE"

;
; if (trigger1_pulled == 1)
;
	lda     _trigger1_pulled
	cmp     #$01
	bne     L051B
;
; zap1_hit_detected = zap_read(0);
;
	lda     #$00
	jsr     _zap_read
	sta     _zap1_hit_detected
;
; if (trigger2_pulled == 1)
;
L051B:	lda     _trigger2_pulled
	cmp     #$01
	bne     L034C
;
; zap2_hit_detected = zap_read(1); // look for light in zapper, port 2
;
	jsr     _zap_read
	sta     _zap2_hit_detected
;
; }
;
L034C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_ball_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_ball_hit: near

.segment	"CODE"

;
; if (zap1_hit_detected == 1)
;
	ldx     #$00
	lda     _zap1_hit_detected
	cmp     #$01
	bne     L0538
;
; balls_x_direction[index] = GOING_RIGHT;
;
	ldy     _index
	sta     _balls_x_direction,y
;
; if (zap2_hit_detected == 1)
;
L0538:	lda     _zap2_hit_detected
	cmp     #$01
	bne     L0539
;
; balls_x_direction[index] = GOING_LEFT;
;
	ldy     _index
	txa
	sta     _balls_x_direction,y
;
; if (zap1_hit_detected == 1 || zap2_hit_detected == 1) // if it's hit update the speed
;
L0539:	lda     _zap1_hit_detected
	cmp     #$01
	beq     L053C
	lda     _zap2_hit_detected
	cmp     #$01
	beq     L053C
	rts
;
; balls_x_speed[index] += DEFAULT_SPEED_STEP_UP;
;
L053C:	lda     _index
	asl     a
	bcc     L052B
	inx
	clc
L052B:	adc     #<(_balls_x_speed)
	tay
	txa
	adc     #>(_balls_x_speed)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$90
	bcc     L02BF
	inx
L02BF:	inx
	jsr     staxspidx
;
; if (get_frame_count() & 0x01 == 1)
;
	jsr     _get_frame_count
	ldx     #$00
	and     #$01
	beq     L053D
;
; balls_y_speed[index] -= DEFAULT_SPEED_STEP_UP;
;
	lda     _index
	asl     a
	bcc     L052C
	inx
	clc
L052C:	adc     #<(_balls_y_speed)
	tay
	txa
	adc     #>(_balls_y_speed)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sec
	sbc     #$90
	bcs     L02C5
	dex
L02C5:	dex
;
; else
;
	jmp     L0529
;
; balls_y_speed[index] += DEFAULT_SPEED_STEP_UP;
;
L053D:	lda     _index
	asl     a
	bcc     L052D
	inx
	clc
L052D:	adc     #<(_balls_y_speed)
	tay
	txa
	adc     #>(_balls_y_speed)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$90
	bcc     L02CA
	inx
L02CA:	inx
L0529:	jsr     staxspidx
;
; balls_hits[index] = balls_hits[index] + 1;
;
	lda     #<(_balls_hits)
	ldx     #>(_balls_hits)
	clc
	adc     _index
	bcc     L02CD
	inx
L02CD:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _balls_hits,y
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; if (balls_hits[index] > MAX_HITS && balls_type[index] != SMALL_BALL)
;
	ldy     _index
	lda     _balls_hits,y
	cmp     #$04
	bcc     L053F
	ldy     _index
	lda     _balls_type,y
	bne     L0540
L053F:	rts
;
; for (index2 = 0; index2 < MAX_BALLS; ++index2)
;
L0540:	lda     #$00
	sta     _index2
L0541:	lda     _index2
	cmp     #$04
	bcs     L02DB
;
; if (balls_type[index2] == TURN_OFF)
;
	ldy     _index2
	lda     _balls_type,y
	cmp     #$FF
;
; break;
;
	beq     L02DB
;
; for (index2 = 0; index2 < MAX_BALLS; ++index2)
;
	inc     _index2
	jmp     L0541
;
; switch (balls_type[index])
;
L02DB:	ldy     _index
	ldx     #$00
	lda     _balls_type,y
;
; }
;
	cmp     #$01
	beq     L02EC
	cmp     #$02
	beq     L02F2
	jmp     L0542
;
; balls_type[index2] = SMALL_BALL;
;
L02EC:	ldy     _index2
	txa
;
; break;
;
	jmp     L052A
;
; balls_type[index2] = MEDIUM_BALL;
;
L02F2:	ldy     _index2
	lda     #$01
L052A:	sta     _balls_type,y
;
; balls_x[index2] = balls_x[index];
;
L0542:	lda     _index2
	asl     a
	bcc     L052E
	inx
	clc
L052E:	adc     #<(_balls_x)
	tay
	txa
	adc     #>(_balls_x)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L052F
	inx
	clc
L052F:	adc     #<(_balls_x)
	sta     ptr1
	txa
	adc     #>(_balls_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; balls_y[index2] = balls_y[index];
;
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L0530
	inx
	clc
L0530:	adc     #<(_balls_y)
	tay
	txa
	adc     #>(_balls_y)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0531
	inx
	clc
L0531:	adc     #<(_balls_y)
	sta     ptr1
	txa
	adc     #>(_balls_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; balls_x_speed[index2] = balls_x_speed[index];
;
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L0532
	inx
	clc
L0532:	adc     #<(_balls_x_speed)
	tay
	txa
	adc     #>(_balls_x_speed)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0533
	inx
	clc
L0533:	adc     #<(_balls_x_speed)
	sta     ptr1
	txa
	adc     #>(_balls_x_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; balls_y_speed[index2] = balls_y_speed[index];
;
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L0534
	inx
	clc
L0534:	adc     #<(_balls_y_speed)
	tay
	txa
	adc     #>(_balls_y_speed)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0535
	inx
	clc
L0535:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; balls_x_direction[index2] = balls_x_direction[index];
;
	lda     #<(_balls_x_direction)
	ldx     #>(_balls_x_direction)
	clc
	adc     _index2
	bcc     L030A
	inx
L030A:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _balls_x_direction,y
	ldy     #$00
	sta     (ptr1),y
;
; balls_y_direction[index2] = GOING_UP;
;
	ldy     _index2
	lda     #$00
	sta     _balls_y_direction,y
;
; balls_type[index] = balls_type[index2];
;
	lda     #<(_balls_type)
	ldx     #>(_balls_type)
	clc
	adc     _index
	bcc     L0314
	inx
L0314:	sta     ptr1
	stx     ptr1+1
	ldy     _index2
	lda     _balls_type,y
	ldy     #$00
	sta     (ptr1),y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	lda     #$01
	sta     _balls_y_direction,y
;
; if (balls_y_speed[index] == 0)
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0536
	inx
	clc
L0536:	adc     #<(_balls_y_speed)
	sta     ptr1
	txa
	adc     #>(_balls_y_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L031C
	cmp     #$00
	bne     L031C
;
; ++balls_y_speed[index];
;
	lda     _index
	asl     a
	bcc     L0537
	inx
	clc
L0537:	adc     #<(_balls_y_speed)
	tay
	txa
	adc     #>(_balls_y_speed)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$01
	bcc     L0543
	inx
L0543:	jmp     staxspidx
;
; }
;
L031C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cooldown: near

.segment	"CODE"

;
; if (zap1_cooldown > 0)
;
	lda     _zap1_cooldown
	beq     L0544
;
; --zap1_cooldown;
;
	dec     _zap1_cooldown
;
; if (zap2_cooldown > 0)
;
L0544:	lda     _zap2_cooldown
	beq     L02A9
;
; --zap2_cooldown;
;
	dec     _zap2_cooldown
;
; }
;
L02A9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_box (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_box: near

.segment	"CODE"

;
; temp1 = high_byte(balls_x[index]);
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0547
	inx
	clc
L0547:	adc     #<(_balls_x)
	sta     ptr1
	txa
	adc     #>(_balls_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp1
;
; temp2 = high_byte(balls_y[index]);
;
	ldx     #$00
	lda     _index
	asl     a
	bcc     L0548
	inx
	clc
L0548:	adc     #<(_balls_y)
	sta     ptr1
	txa
	adc     #>(_balls_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _temp2
;
; switch (balls_type[index])
;
	ldy     _index
	lda     _balls_type,y
;
; }
;
	beq     L041C
	cmp     #$01
	beq     L0418
	cmp     #$02
	bne     L0412
;
; pointer2 = LargeBox;
;
	lda     #>(_LargeBox)
	sta     _pointer2+1
	lda     #<(_LargeBox)
;
; break;
;
	jmp     L0549
;
; pointer2 = MediumBox;
;
L0418:	lda     #>(_MediumBox)
	sta     _pointer2+1
	lda     #<(_MediumBox)
;
; break;
;
	jmp     L0549
;
; pointer2 = SmallBox;
;
L041C:	lda     #>(_SmallBox)
	sta     _pointer2+1
	lda     #<(_SmallBox)
L0549:	sta     _pointer2
;
; oam_meta_spr(temp1, temp2, pointer2);
;
L0412:	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _pointer2
	ldx     _pointer2+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_ball: near

.segment	"CODE"

;
; temp1 = balls_x[index2]; // temp_x value
;
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L054A
	inx
L054A:	sta     ptr1
	txa
	clc
	adc     #>(_balls_x)
	sta     ptr1+1
	ldy     #<(_balls_x)
	lda     (ptr1),y
	sta     _temp1
;
; temp2 = balls_y[index2]; // temp_y value
;
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L054B
	inx
L054B:	sta     ptr1
	txa
	clc
	adc     #>(_balls_y)
	sta     ptr1+1
	ldy     #<(_balls_y)
	lda     (ptr1),y
	sta     _temp2
;
; switch (balls_type[index2])
;
	ldy     _index2
	lda     _balls_type,y
;
; }
;
	beq     L043C
	cmp     #$01
	beq     L0435
	cmp     #$02
	bne     L043C
;
; pointer2 = LargeBall;
;
	lda     #>(_LargeBall)
	sta     _pointer2+1
	lda     #<(_LargeBall)
;
; break;
;
	jmp     L054C
;
; pointer2 = MediumBall;
;
L0435:	lda     #>(_MediumBall)
	sta     _pointer2+1
	lda     #<(_MediumBall)
;
; break;
;
	jmp     L054C
;
; pointer2 = SmallBall;
;
L043C:	lda     #>(_SmallBall)
	sta     _pointer2+1
	lda     #<(_SmallBall)
L054C:	sta     _pointer2
;
; oam_meta_spr(temp1, temp2, pointer2);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _pointer2
	ldx     _pointer2+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_balls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_balls: near

.segment	"CODE"

;
; offset = get_frame_count() & 3; // returns 0,1,2,3
;
	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 2;      // * 4, the size of the shuffle array
;
	asl     a
	asl     a
	sta     _offset
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	lda     #$00
	sta     _index
L054F:	lda     _index
	cmp     #$04
	bcs     L0449
;
; index2 = shuffle_array[offset];
;
	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; index2 = index; // <-- shortcut to keep the shuffling code in if we need it
;
	lda     _index
	sta     _index2
;
; if (balls_type[index2] == TURN_OFF)
;
	ldy     _index2
	lda     _balls_type,y
	cmp     #$FF
;
; continue; // we found an empty spot
;
	beq     L0550
;
; draw_ball();
;
	jsr     _draw_ball
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L0550:	inc     _index
	jmp     L054F
;
; }
;
L0449:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; set_data_pointer(level);
;
	lda     #<(_level)
	ldx     #>(_level)
	jsr     _set_data_pointer
;
; memcpy(c_map, level, 240);
;
	ldy     #$00
L0467:	lda     _level,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0467
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L0553:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L0552:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L0554
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L0552
;
; if (y == 0xe0)
;
L0554:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L0469
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L0553
;
; ppu_on_all();
;
L0469:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_score: near

.segment	"CODE"

;
; one_vram_buffer(player_1_score + 48, NTADR_A(3, 2));
;
	lda     _player_1_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$43
	jsr     _one_vram_buffer
;
; one_vram_buffer(player_2_score + 48, NTADR_A(26, 2));
;
	lda     _player_2_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$5A
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cooldown: near

.segment	"CODE"

;
; index = 0;
;
	lda     #$00
	sta     _index
;
; temp1 = zap1_cooldown >> 2;
;
	lda     _zap1_cooldown
	lsr     a
	lsr     a
	ldx     #$00
	sta     _temp1
;
; while (index < MAX_COOLDOWN >> 2)
;
	jmp     L0558
;
; if (index < temp1)
;
L0557:	lda     _index
	cmp     _temp1
	txa
	sbc     #$00
	bcs     L04A6
;
; one_vram_buffer('l', NTADR_A(3 + index, 26));
;
	lda     #$6C
;
; else
;
	jmp     L057A
;
; one_vram_buffer(' ', NTADR_A(3 + index, 26));
;
L04A6:	lda     #$20
L057A:	jsr     pusha
	lda     _index
	clc
	adc     #$03
	bcc     L04BA
	ldx     #$01
L04BA:	ora     #$40
	pha
	txa
	ora     #$03
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; index += 1;
;
	inc     _index
;
; while (index < MAX_COOLDOWN >> 2)
;
	ldx     #$00
L0558:	lda     _index
	cmp     #$02
	bcc     L0557
;
; index = 0;
;
	stx     _index
;
; temp1 = zap2_cooldown >> 2;
;
	lda     _zap2_cooldown
	lsr     a
	lsr     a
	sta     _temp1
;
; while (index < MAX_COOLDOWN >> 2)
;
	jmp     L055A
;
; if (index < temp1)
;
L0559:	lda     _index
	cmp     _temp1
	txa
	sbc     #$00
	bcs     L04C5
;
; one_vram_buffer('l', NTADR_A(26 - index, 26));
;
	lda     #$6C
;
; else
;
	jmp     L057E
;
; one_vram_buffer(' ', NTADR_A(26 - index, 26));
;
L04C5:	lda     #$20
L057E:	jsr     pusha
	lda     #$1A
	sec
	sbc     _index
	pha
	txa
	sbc     #$00
	tax
	pla
	ora     #$40
	pha
	txa
	ora     #$03
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; index += 1;
;
	inc     _index
;
; while (index < MAX_COOLDOWN >> 2)
;
	ldx     #$00
L055A:	lda     _index
	cmp     #$02
	bcc     L0559
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ trigger_pulled (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_trigger_pulled: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_mask(0x16); // BG off, won't happen till NEXT frame
;
	lda     #$16
	jsr     _ppu_mask
;
; ppu_wait_nmi(); // wait for that blank frame
;
	jsr     _ppu_wait_nmi
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; number_of_balls_active = 0;
;
	sta     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	sta     _index
L057F:	lda     _index
	cmp     #$04
	bcs     L0581
;
; if (balls_type[index] != TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
	beq     L0580
;
; ++number_of_balls_active;
;
	inc     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L0580:	inc     _index
	jmp     L057F
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L0581:	lda     #$00
	sta     _index
L0582:	lda     _index
	cmp     #$04
	bcs     L0290
;
; if (balls_type[index] == TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
;
; continue; // we found an empty spot
;
	beq     L0585
;
; oam_clear(); // clear the NEXT frame
;
	jsr     _oam_clear
;
; draw_box();  // draw a ball on the next frame
;
	jsr     _draw_box
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_zapper_hits();
;
	jsr     _read_zapper_hits
;
; if (zap1_hit_detected == 1 || zap2_hit_detected == 1)
;
	lda     _zap1_hit_detected
	cmp     #$01
	beq     L0584
	lda     _zap2_hit_detected
	cmp     #$01
	bne     L0585
;
; handle_ball_hit();
;
L0584:	jsr     _handle_ball_hit
;
; break;
;
	jmp     L0290
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L0585:	inc     _index
	jmp     L0582
;
; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
;
L0290:	lda     #$1E
	jmp     _ppu_mask

.endproc

; ---------------------------------------------------------------
; void __near__ clear_balls_and_hits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_balls_and_hits: near

.segment	"CODE"

;
; for (index = 0; index < MAX_BALLS; ++index)
;
	lda     #$00
	sta     _index
L0586:	lda     _index
	cmp     #$04
	bcs     L03B4
;
; balls_type[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _balls_type,y
;
; balls_hits[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _balls_hits,y
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	inc     _index
	jmp     L0586
;
; }
;
L03B4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);  // load the palette
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp); // load the palette
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_vram_buffer();  // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all();    // turn on screen
;
	jsr     _ppu_on_all
;
; clear_balls_and_hits();
;
	jsr     _clear_balls_and_hits
;
; while (game_mode == MODE_TITLE) // gameloop
;
	jmp     L0587
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0249:	jsr     _ppu_wait_nmi
;
; draw_bg();
;
	jsr     _draw_bg
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; while (game_mode == MODE_TITLE) // gameloop
;
L0587:	lda     _game_mode
	beq     L0249
;
; while (game_mode == MODE_GAME) // gameloop
;
	jmp     L058B
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0251:	jsr     _ppu_wait_nmi
;
; zap1_hit_detected = 0;
;
	lda     #$00
	sta     _zap1_hit_detected
;
; zap2_hit_detected = 0;
;
	sta     _zap2_hit_detected
;
; oam_clear();
;
	jsr     _oam_clear
;
; read_input_triggers();
;
	jsr     _read_input_triggers
;
; draw_score();
;
	jsr     _draw_score
;
; update_cooldown();
;
	jsr     _update_cooldown
;
; draw_cooldown();
;
	jsr     _draw_cooldown
;
; number_of_balls_active = 0;
;
	lda     #$00
	sta     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	sta     _index
L0588:	lda     _index
	cmp     #$04
	bcs     L058A
;
; if (balls_type[index] != TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
	beq     L0589
;
; ++number_of_balls_active;
;
	inc     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L0589:	inc     _index
	jmp     L0588
;
; if (number_of_balls_active != 0)
;
L058A:	lda     _number_of_balls_active
	beq     L026E
;
; move_balls();
;
	jsr     _move_balls
;
; draw_balls();
;
	jsr     _draw_balls
;
; if (trigger1_pulled || trigger2_pulled)
;
	lda     _trigger1_pulled
	bne     L0273
	lda     _trigger2_pulled
	beq     L0276
;
; trigger_pulled();
;
L0273:	jsr     _trigger_pulled
;
; else
;
	jmp     L0276
;
; new_ball();
;
L026E:	jsr     _new_ball
;
; gray_line();
;
L0276:	jsr     _gray_line
;
; while (game_mode == MODE_GAME) // gameloop
;
L058B:	lda     _game_mode
	cmp     #$01
	beq     L0251
;
; while (1)
;
	jmp     L0587

.endproc

