;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_vert
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_pal_fade_to
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_zap_shoot
	.export		_frames_to_wait
	.export		_pad1_zapper
	.export		_zap1_ready
	.export		_zap1_hit_detected
	.export		_pad2_zapper
	.export		_zap2_ready
	.export		_zap2_hit_detected
	.export		_zap1_cooldown
	.export		_zap2_cooldown
	.export		_pad1
	.export		_pad1_new
	.export		_ball_x_direction
	.export		_ball_y_direction
	.export		_ball_active
	.export		_ball_x
	.export		_ball_y
	.export		_ball_x_speed
	.export		_ball_y_speed
	.export		_ball_wait
	.export		_player_1_score
	.export		_player_2_score
	.export		_temp1
	.export		_temp2
	.export		_trigger1_pulled
	.export		_trigger2_pulled
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_c_map
	.export		_lines
	.export		_move_ball
	.export		_new_ball
	.export		_read_input_triggers
	.export		_read_zapper_hits
	.export		_update_ball_movement
	.export		_update_cooldown
	.export		_draw_box
	.export		_draw_ball
	.export		_draw_bg
	.export		_draw_score
	.export		_draw_cooldown
	.export		_level
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles
	.export		_AlanHead
	.export		_WhiteBox
	.export		_main

.segment	"DATA"

_frames_to_wait:
	.byte	$05
_zap1_cooldown:
	.byte	$00
_zap2_cooldown:
	.byte	$00
_ball_y_direction:
	.byte	$00
_ball_wait:
	.byte	$00
_player_1_score:
	.byte	$00
_player_2_score:
	.byte	$00
_index:
	.byte	$00

.segment	"RODATA"

_lines:
	.byte	$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$00
_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$2C
	.byte	$1B
	.byte	$17
	.byte	$11
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$2A
	.byte	$1B
	.byte	$05
	.byte	$38
	.byte	$3D
_palette_sp:
	.byte	$1B
	.byte	$37
	.byte	$24
	.byte	$17
	.byte	$1B
	.byte	$36
	.byte	$12
	.byte	$16
	.byte	$1B
	.byte	$17
	.byte	$21
	.byte	$37
	.byte	$1B
	.byte	$2D
	.byte	$3D
	.byte	$37
_metatiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7B
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5C
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$5C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$5D
	.byte	$7B
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5C
	.byte	$01
	.byte	$7E
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$3C
	.byte	$5C
	.byte	$7D
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$7E
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$3E
	.byte	$7F
	.byte	$01
	.byte	$5F
	.byte	$3C
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$2F
	.byte	$5B
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$3D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
_AlanHead:
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$CD
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$DC
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$DD
	.byte	$00
	.byte	$80
_WhiteBox:
	.byte	$00
	.byte	$00
	.byte	$CB
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$CB
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$DA
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$DA
	.byte	$43
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1_zapper:
	.res	1,$00
_zap1_ready:
	.res	1,$00
_zap1_hit_detected:
	.res	1,$00
_pad2_zapper:
	.res	1,$00
_zap2_ready:
	.res	1,$00
_zap2_hit_detected:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_ball_x_direction:
	.res	1,$00
_ball_active:
	.res	1,$00
_ball_x:
	.res	2,$00
_ball_y:
	.res	2,$00
_ball_x_speed:
	.res	2,$00
_ball_y_speed:
	.res	2,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_trigger1_pulled:
	.res	1,$00
_trigger2_pulled:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ move_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_ball: near

.segment	"CODE"

;
; if (ball_y > TOP_BOUNDARY)
;
	lda     _ball_y
	cmp     #$01
	lda     _ball_y+1
	sbc     #$B0
	bcc     L02A9
;
; ball_y_direction = GOING_UP;
;
	lda     #$00
	sta     _ball_y_direction
;
; if (ball_y < BOTTOM_BOUNDARY)
;
L02A9:	ldx     _ball_y+1
	cpx     #$30
	bcs     L02AD
;
; ball_y_direction = GOING_DOWN;
;
	lda     #$01
	sta     _ball_y_direction
;
; if (ball_x_direction == GOING_LEFT)
;
L02AD:	lda     _ball_x_direction
	bne     L02B1
;
; ball_x -= ball_x_speed;
;
	lda     _ball_x_speed
	eor     #$FF
	sec
	adc     _ball_x
	sta     _ball_x
	lda     _ball_x_speed+1
	eor     #$FF
;
; else
;
	jmp     L036C
;
; ball_x += ball_x_speed;
;
L02B1:	lda     _ball_x_speed
	clc
	adc     _ball_x
	sta     _ball_x
	lda     _ball_x_speed+1
L036C:	adc     _ball_x+1
	sta     _ball_x+1
;
; if (ball_y_direction == GOING_UP)
;
	lda     _ball_y_direction
	bne     L02B8
;
; ball_y -= ball_y_speed;
;
	lda     _ball_y_speed
	eor     #$FF
	sec
	adc     _ball_y
	sta     _ball_y
	lda     _ball_y_speed+1
	eor     #$FF
;
; else
;
	jmp     L036D
;
; ball_y += ball_y_speed;
;
L02B8:	lda     _ball_y_speed
	clc
	adc     _ball_y
	sta     _ball_y
	lda     _ball_y_speed+1
L036D:	adc     _ball_y+1
	sta     _ball_y+1
;
; if (ball_x < LEFT_BOUNDARY)
;
	ldx     _ball_x+1
	cpx     #$10
	bcs     L02BF
;
; ++player_1_score;
;
	inc     _player_1_score
;
; ball_active = 0;
;
	lda     #$00
	sta     _ball_active
;
; ball_wait = 20;
;
	lda     #$14
	sta     _ball_wait
;
; if (ball_x > RIGHT_BOUNDARY)
;
L02BF:	lda     _ball_x
	cmp     #$01
	lda     _ball_x+1
	sbc     #$D0
	bcc     L02C6
;
; ++player_2_score;
;
	inc     _player_2_score
;
; ball_active = 0;
;
	lda     #$00
	sta     _ball_active
;
; ball_wait = 20;
;
	lda     #$14
	sta     _ball_wait
;
; }
;
L02C6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_ball: near

.segment	"CODE"

;
; ball_active = 1;
;
	lda     #$01
	sta     _ball_active
;
; ball_x = MIDDLE_SCREEN; // should give 0x4000-0xbf80
;
	ldx     #$70
	lda     #$00
	sta     _ball_x
	stx     _ball_x+1
;
; ball_y = MIDDLE_SCREEN; // int
;
	sta     _ball_y
	stx     _ball_y+1
;
; ball_x_speed = DEFAULT_X_SPEED; // 0 is stopped, 400 is fast
;
	ldx     #$01
	lda     #$2C
	sta     _ball_x_speed
	stx     _ball_x_speed+1
;
; ball_y_speed = DEFAULT_Y_SPEED;
;
	dex
	lda     #$C8
	sta     _ball_y_speed
	stx     _ball_y_speed+1
;
; switch (get_frame_count() & 0b00000011)
;
	jsr     _get_frame_count
	and     #$03
;
; }
;
	beq     L036F
	cmp     #$01
	beq     L0370
	cmp     #$02
	beq     L0371
	cmp     #$03
	beq     L0372
	rts
;
; ball_x_direction = GOING_LEFT;
;
L036F:	sta     _ball_x_direction
;
; ball_y_direction = GOING_UP;
;
	sta     _ball_y_direction
;
; break;
;
	rts
;
; ball_x_direction = GOING_LEFT;
;
L0370:	lda     #$00
	sta     _ball_x_direction
;
; ball_y_direction = GOING_DOWN;
;
	lda     #$01
	sta     _ball_y_direction
;
; break;
;
	rts
;
; ball_x_direction = GOING_RIGHT;
;
L0371:	lda     #$01
	sta     _ball_x_direction
;
; ball_y_direction = GOING_DOWN;
;
	sta     _ball_y_direction
;
; break;
;
	rts
;
; ball_x_direction = GOING_RIGHT;
;
L0372:	lda     #$01
	sta     _ball_x_direction
;
; ball_y_direction = GOING_UP;
;
	lda     #$00
	sta     _ball_y_direction
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_input_triggers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input_triggers: near

.segment	"CODE"

;
; trigger1_pulled = 0;
;
	lda     #$00
	sta     _trigger1_pulled
;
; trigger2_pulled = 0;
;
	sta     _trigger2_pulled
;
; zap1_ready = pad1_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad1_zapper
	eor     #$01
	sta     _zap1_ready
;
; zap2_ready = pad2_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad2_zapper
	eor     #$01
	sta     _zap2_ready
;
; pad1_zapper = zap_shoot(0); // controller slot 1
;
	lda     #$00
	jsr     _zap_shoot
	sta     _pad1_zapper
;
; pad2_zapper = zap_shoot(1); // controller slot 2
;
	lda     #$01
	jsr     _zap_shoot
	sta     _pad2_zapper
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if ((pad1_new & PAD_A) && zap1_cooldown == 0) //((pad1_zapper) && (zap1_ready));
;
	and     #$80
	beq     L0376
	lda     _zap1_cooldown
	bne     L0376
;
; trigger1_pulled = 1;
;
	lda     #$01
	sta     _trigger1_pulled
;
; zap1_cooldown = MAX_COOLDOWN;
;
	lda     #$20
	sta     _zap1_cooldown
;
; if ((pad1_new & PAD_B) && zap2_cooldown == 0) //((pad2_zapper) && (zap2_ready));
;
L0376:	lda     _pad1_new
	and     #$40
	beq     L0378
	lda     _zap2_cooldown
	beq     L0379
L0378:	rts
;
; trigger2_pulled = 1;
;
L0379:	lda     #$01
	sta     _trigger2_pulled
;
; zap2_cooldown = MAX_COOLDOWN;
;
	lda     #$20
	sta     _zap2_cooldown
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_zapper_hits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_zapper_hits: near

.segment	"CODE"

;
; if (trigger1_pulled == 1)
;
	lda     _trigger1_pulled
	cmp     #$01
	bne     L037A
;
; if (pad1_new & PAD_A) //this is debug code
;
	lda     _pad1_new
	and     #$80
	beq     L037A
;
; zap1_hit_detected = 1;
;
	lda     #$01
	sta     _zap1_hit_detected
;
; if (trigger2_pulled == 1)
;
L037A:	lda     _trigger2_pulled
	cmp     #$01
	bne     L02A4
;
; if (pad1_new & PAD_B)//this is debug code
;
	lda     _pad1_new
	and     #$40
	beq     L02A4
;
; zap2_hit_detected = 1;
;
	lda     #$01
	sta     _zap2_hit_detected
;
; }
;
L02A4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_ball_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_ball_movement: near

.segment	"CODE"

;
; if (zap1_hit_detected == 1)
;
	lda     _zap1_hit_detected
	cmp     #$01
	bne     L037B
;
; ball_x_direction = GOING_RIGHT;
;
	sta     _ball_x_direction
;
; if (zap2_hit_detected == 1)
;
L037B:	lda     _zap2_hit_detected
	cmp     #$01
	bne     L0261
;
; ball_x_direction = GOING_LEFT;
;
	lda     #$00
	sta     _ball_x_direction
;
; if (zap1_hit_detected || zap2_hit_detected) // if it's hit update the speed
;
L0261:	lda     _zap1_hit_detected
	bne     L037C
	lda     _zap2_hit_detected
	bne     L037C
	rts
;
; ball_x_speed += DEFAULT_SPEED_STEP;
;
L037C:	lda     #$28
	clc
	adc     _ball_x_speed
	sta     _ball_x_speed
	bcc     L026A
	inc     _ball_x_speed+1
;
; if (get_frame_count() & 0x01 == 1)
;
L026A:	jsr     _get_frame_count
	and     #$01
	beq     L026B
;
; ball_y_speed -= DEFAULT_SPEED_STEP / 4;
;
	lda     _ball_y_speed
	sec
	sbc     #$0A
	sta     _ball_y_speed
	bcs     L0273
	dec     _ball_y_speed+1
;
; else
;
	rts
;
; ball_y_speed += DEFAULT_SPEED_STEP;
;
L026B:	lda     #$28
	clc
	adc     _ball_y_speed
	sta     _ball_y_speed
	bcc     L0273
	inc     _ball_y_speed+1
;
; }
;
L0273:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cooldown: near

.segment	"CODE"

;
; if(zap1_cooldown > 0){
;
	lda     _zap1_cooldown
	beq     L037D
;
; --zap1_cooldown;
;
	dec     _zap1_cooldown
;
; if(zap2_cooldown > 0){
;
L037D:	lda     _zap2_cooldown
	beq     L0259
;
; --zap2_cooldown;
;
	dec     _zap2_cooldown
;
; }
;
L0259:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_box (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_box: near

.segment	"CODE"

;
; temp1 = high_byte(ball_x);
;
	lda     _ball_x+1
	sta     _temp1
;
; temp2 = high_byte(ball_y);
;
	lda     _ball_y+1
	sta     _temp2
;
; oam_meta_spr(temp1, temp2, WhiteBox);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_WhiteBox)
	ldx     #>(_WhiteBox)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_ball: near

.segment	"CODE"

;
; temp1 = high_byte(ball_x);
;
	lda     _ball_x+1
	sta     _temp1
;
; temp2 = high_byte(ball_y);
;
	lda     _ball_y+1
	sta     _temp2
;
; oam_meta_spr(temp1, temp2, AlanHead);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     #<(_AlanHead)
	ldx     #>(_AlanHead)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();     // screen off
;
	jsr     _ppu_off
;
; oam_clear();    // clear all sprites
;
	jsr     _oam_clear
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; pal_bg(level);
;
	lda     #<(_level)
	ldx     #>(_level)
	jsr     _pal_bg
;
; set_data_pointer(level);
;
	lda     #<(_level)
	ldx     #>(_level)
	jsr     _set_data_pointer
;
; memcpy(c_map, level, 240);
;
	ldy     #$00
L031A:	lda     _level,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L031A
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L0380:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L037F:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L0381
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L037F
;
; if (y == 0xe0)
;
L0381:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L031C
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L0380
;
; pal_fade_to(0, 4); // fade to black
;
L031C:	lda     #$00
	jsr     pusha
	lda     #$04
	jsr     _pal_fade_to
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_score: near

.segment	"CODE"

;
; one_vram_buffer(player_1_score + 48, NTADR_A(3, 6)); 
;
	lda     _player_1_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$C3
	jsr     _one_vram_buffer
;
; one_vram_buffer(player_2_score + 48, NTADR_A(26, 6)); 
;
	lda     _player_2_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$DA
	jsr     _one_vram_buffer
;
; multi_vram_buffer_vert(lines, sizeof(lines) - 1, NTADR_A(3, 8));
;
	jsr     decsp3
	lda     #<(_lines)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lines)
	sta     (sp),y
	lda     #$0F
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$03
	jsr     _multi_vram_buffer_vert
;
; multi_vram_buffer_vert(lines, sizeof(lines) - 1, NTADR_A(26, 8));
;
	jsr     decsp3
	lda     #<(_lines)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lines)
	sta     (sp),y
	lda     #$0F
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$1A
	jmp     _multi_vram_buffer_vert

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cooldown: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);  // load the palette
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp); // load the palette
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_vram_buffer();  // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE) // gameloop
;
	jmp     L0382
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0220:	jsr     _ppu_wait_nmi
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; while (game_mode == MODE_TITLE) // gameloop
;
L0382:	lda     _game_mode
	beq     L0220
;
; while (game_mode == MODE_GAME) // gameloop
;
	jmp     L0384
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0227:	jsr     _ppu_wait_nmi
;
; zap1_hit_detected = 0;
;
	lda     #$00
	sta     _zap1_hit_detected
;
; zap2_hit_detected = 0;
;
	sta     _zap2_hit_detected
;
; oam_clear();
;
	jsr     _oam_clear
;
; read_input_triggers();
;
	jsr     _read_input_triggers
;
; draw_score();
;
	jsr     _draw_score
;
; update_cooldown();
;
	jsr     _update_cooldown
;
; draw_cooldown();
;
	jsr     _draw_cooldown
;
; if (ball_active)
;
	lda     _ball_active
	beq     L0235
;
; move_ball();
;
	jsr     _move_ball
;
; draw_ball();
;
	jsr     _draw_ball
;
; if (trigger1_pulled || trigger2_pulled)
;
	lda     _trigger1_pulled
	bne     L023A
	lda     _trigger2_pulled
	beq     L0384
;
; index = 0;
;
L023A:	lda     #$00
	sta     _index
;
; while (index < frames_to_wait)
;
	jmp     L0383
;
; ppu_wait_nmi();
;
L023E:	jsr     _ppu_wait_nmi
;
; ++index;
;
	inc     _index
;
; while (index < frames_to_wait)
;
L0383:	lda     _index
	cmp     _frames_to_wait
	bcc     L023E
;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_box();   // redraw the star as a box
;
	jsr     _draw_box
;
; ppu_mask(0x16); // BG off, won't happen till NEXT frame
;
	lda     #$16
	jsr     _ppu_mask
;
; ppu_wait_nmi(); // wait till the top of the next frame
;
	jsr     _ppu_wait_nmi
;
; oam_clear();  // clear the NEXT frame
;
	jsr     _oam_clear
;
; draw_ball();  // draw a star on the NEXT frame
;
	jsr     _draw_ball
;
; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
;
	lda     #$1E
	jsr     _ppu_mask
;
; read_zapper_hits();
;
	jsr     _read_zapper_hits
;
; update_ball_movement(); // based off zapper hit data
;
	jsr     _update_ball_movement
;
; else if (ball_wait)
;
	jmp     L0384
L0235:	lda     _ball_wait
	beq     L0250
;
; --ball_wait;
;
	dec     _ball_wait
;
; else
;
	jmp     L0384
;
; new_ball();
;
L0250:	jsr     _new_ball
;
; while (game_mode == MODE_GAME) // gameloop
;
L0384:	lda     _game_mode
	cmp     #$01
	beq     L0227
;
; while (1)
;
	jmp     L0382

.endproc

