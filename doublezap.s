;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_get_frame_count
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_gray_line
	.import		_zap_shoot
	.import		_zap_read
	.export		_frames_to_wait
	.export		_frames_to_read
	.export		_pad1_zapper
	.export		_zap1_ready
	.export		_zap1_hit_detected
	.export		_pad2_zapper
	.export		_zap2_ready
	.export		_zap2_hit_detected
	.export		_zap1_cooldown
	.export		_zap2_cooldown
	.export		_zap1_detected_in_wait
	.export		_zap2_detected_in_wait
	.export		_number_of_balls_active
	.export		_ball_index_hit
	.export		_pointer
	.export		_pointer2
	.export		_balls_x
	.export		_balls_y
	.export		_balls_x_speed
	.export		_balls_y_speed
	.export		_balls_x_direction
	.export		_balls_y_direction
	.export		_balls_active
	.export		_balls_type
	.export		_Generic
	.export		_pad1
	.export		_pad1_new
	.export		_player_1_score
	.export		_player_2_score
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_trigger1_pulled
	.export		_trigger2_pulled
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_index2
	.export		_offset
	.export		_shuffle_array
	.export		_c_map
	.export		_move_ball
	.export		_move_balls
	.export		_new_ball
	.export		_read_input_triggers
	.export		_read_zapper_hits
	.export		_update_ball_movement
	.export		_update_cooldown
	.export		_draw_box
	.export		_draw_ball
	.export		_draw_balls
	.export		_draw_bg
	.export		_draw_score
	.export		_draw_cooldown
	.export		_trigger_pulled
	.export		_level
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles
	.export		_SmallBall
	.export		_MediumBall
	.export		_LargeBall
	.export		_SmallBox
	.export		_MediumBox
	.export		_LargeBox
	.export		_main

.segment	"DATA"

_frames_to_wait:
	.byte	$00
_frames_to_read:
	.byte	$0A
_zap1_cooldown:
	.byte	$00
_zap2_cooldown:
	.byte	$00
_zap1_detected_in_wait:
	.byte	$00
_zap2_detected_in_wait:
	.byte	$00
_number_of_balls_active:
	.byte	$00
_ball_index_hit:
	.byte	$FE
_player_1_score:
	.byte	$00
_player_2_score:
	.byte	$00
_index:
	.byte	$00
_index2:
	.byte	$00

.segment	"RODATA"

_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$2C
	.byte	$1B
	.byte	$17
	.byte	$11
	.byte	$0F
	.byte	$1B
	.byte	$07
	.byte	$17
	.byte	$2A
	.byte	$1B
	.byte	$05
	.byte	$38
	.byte	$3D
_palette_sp:
	.byte	$1B
	.byte	$37
	.byte	$24
	.byte	$17
	.byte	$1B
	.byte	$36
	.byte	$12
	.byte	$16
	.byte	$1B
	.byte	$17
	.byte	$21
	.byte	$37
	.byte	$1B
	.byte	$2D
	.byte	$3D
	.byte	$37
_metatiles:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
_SmallBall:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$01
	.byte	$80
_MediumBall:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$14
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$24
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$32
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$33
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$34
	.byte	$02
	.byte	$80
_LargeBall:
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$25
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$27
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$28
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$35
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$36
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$37
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$38
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$45
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$46
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$47
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$48
	.byte	$03
	.byte	$80
_SmallBox:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$03
	.byte	$80
_MediumBox:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$53
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$54
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$64
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$72
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$73
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$74
	.byte	$03
	.byte	$80
_LargeBox:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$57
	.byte	$03
	.byte	$18
	.byte	$00
	.byte	$58
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$65
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$67
	.byte	$03
	.byte	$18
	.byte	$08
	.byte	$68
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$76
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$77
	.byte	$03
	.byte	$18
	.byte	$10
	.byte	$78
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$85
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$86
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$87
	.byte	$03
	.byte	$18
	.byte	$18
	.byte	$88
	.byte	$03
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1_zapper:
	.res	1,$00
_zap1_ready:
	.res	1,$00
_zap1_hit_detected:
	.res	1,$00
_pad2_zapper:
	.res	1,$00
_zap2_ready:
	.res	1,$00
_zap2_hit_detected:
	.res	1,$00
_pointer:
	.res	2,$00
_pointer2:
	.res	2,$00
_balls_x:
	.res	4,$00
_balls_y:
	.res	4,$00
_balls_x_speed:
	.res	4,$00
_balls_y_speed:
	.res	4,$00
_balls_x_direction:
	.res	4,$00
_balls_y_direction:
	.res	4,$00
_balls_active:
	.res	4,$00
_balls_type:
	.res	4,$00
_Generic:
	.res	4,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_trigger1_pulled:
	.res	1,$00
_trigger2_pulled:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_offset:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ move_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_ball: near

.segment	"CODE"

;
; if (balls_y[index] > TOP_BOUNDARY)
;
	ldy     _index
	lda     _balls_y,y
	cmp     #$B1
	bcc     L0306
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	lda     #$00
	sta     _balls_y_direction,y
;
; if (balls_y[index] < BOTTOM_BOUNDARY)
;
L0306:	ldy     _index
	lda     _balls_y,y
	cmp     #$20
	bcs     L030E
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	lda     #$01
	sta     _balls_y_direction,y
;
; if (balls_x_direction[index] == GOING_LEFT)
;
L030E:	ldy     _index
	lda     _balls_x_direction,y
	bne     L0316
;
; balls_x[index] -= balls_x_speed[index];
;
	lda     #<(_balls_x)
	ldx     #>(_balls_x)
	clc
	adc     _index
	bcc     L031C
	inx
L031C:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     _index
	lda     _balls_x_speed,y
	jsr     tossuba0
;
; else
;
	jmp     L04BE
;
; balls_x[index] += balls_x_speed[index];
;
L0316:	lda     #<(_balls_x)
	ldx     #>(_balls_x)
	clc
	adc     _index
	bcc     L0323
	inx
L0323:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _index
	lda     _balls_x_speed,y
	clc
	adc     ptr1
L04BE:	ldy     #$00
	jsr     staspidx
;
; if (balls_y_direction[index] == GOING_UP)
;
	ldy     _index
	lda     _balls_y_direction,y
	bne     L0327
;
; balls_y[index] -= balls_y_speed[index];
;
	lda     #<(_balls_y)
	ldx     #>(_balls_y)
	clc
	adc     _index
	bcc     L032D
	inx
L032D:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     _index
	lda     _balls_y_speed,y
	jsr     tossuba0
;
; else
;
	jmp     L04BF
;
; balls_y[index] += balls_y_speed[index];
;
L0327:	lda     #<(_balls_y)
	ldx     #>(_balls_y)
	clc
	adc     _index
	bcc     L0334
	inx
L0334:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _index
	lda     _balls_y_speed,y
	clc
	adc     ptr1
L04BF:	ldy     #$00
	jsr     staspidx
;
; if (balls_x[index] < LEFT_BOUNDARY)
;
	ldy     _index
	lda     _balls_x,y
	cmp     #$05
	bcs     L0338
;
; ++player_1_score;
;
	inc     _player_1_score
;
; balls_type[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _balls_type,y
;
; zap1_cooldown = 0;
;
	lda     #$00
	sta     _zap1_cooldown
;
; zap2_cooldown = 0;
;
	sta     _zap2_cooldown
;
; if (balls_x[index] > RIGHT_BOUNDARY)
;
L0338:	ldy     _index
	lda     _balls_x,y
	cmp     #$E1
	bcc     L0345
;
; ++player_2_score;
;
	inc     _player_2_score
;
; balls_type[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _balls_type,y
;
; zap1_cooldown = 0;
;
	lda     #$00
	sta     _zap1_cooldown
;
; zap2_cooldown = 0;
;
	sta     _zap2_cooldown
;
; }
;
L0345:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_balls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_balls: near

.segment	"CODE"

;
; for (index = 0; index < MAX_BALLS; ++index)
;
	lda     #$00
	sta     _index
L04C0:	lda     _index
	cmp     #$04
	bcs     L02F9
;
; if (balls_type[index] == TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
;
; continue; // we found an empty spot
;
	beq     L04C1
;
; move_ball();
;
	jsr     _move_ball
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L04C1:	inc     _index
	jmp     L04C0
;
; }
;
L02F9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_ball: near

.segment	"CODE"

;
; for (index = 0; index < MAX_BALLS; ++index)
;
	lda     #$00
	sta     _index
L04C2:	lda     _index
	cmp     #$04
	bcs     L04C3
;
; balls_type[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _balls_type,y
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	inc     _index
	jmp     L04C2
;
; index = 0;
;
L04C3:	lda     #$00
	sta     _index
;
; balls_type[index] = LARGE_BALL;
;
	ldy     _index
	lda     #$02
	sta     _balls_type,y
;
; balls_x[index] = MIDDLE_SCREEN;
;
	ldy     _index
	lda     #$70
	sta     _balls_x,y
;
; balls_y[index] = MIDDLE_SCREEN;
;
	ldy     _index
	sta     _balls_y,y
;
; balls_x_speed[index] = DEFAULT_X_SPEED;
;
	ldy     _index
	lda     #$01
	sta     _balls_x_speed,y
;
; balls_y_speed[index] = DEFAULT_Y_SPEED;
;
	ldy     _index
	sta     _balls_y_speed,y
;
; switch (get_frame_count() & 0b00000011)
;
	jsr     _get_frame_count
	and     #$03
;
; }
;
	beq     L0379
	cmp     #$01
	beq     L0383
	cmp     #$02
	beq     L038D
	cmp     #$03
	beq     L0397
	jmp     L04C4
;
; balls_x_direction[index] = GOING_LEFT;
;
L0379:	ldy     _index
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
;
; break;
;
	jmp     L04C6
;
; balls_x_direction[index] = GOING_LEFT;
;
L0383:	ldy     _index
	lda     #$00
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	lda     #$01
	sta     _balls_y_direction,y
;
; break;
;
	jmp     L04C5
;
; balls_x_direction[index] = GOING_RIGHT;
;
L038D:	ldy     _index
	lda     #$01
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	sta     _balls_y_direction,y
;
; break;
;
	jmp     L04C5
;
; balls_x_direction[index] = GOING_RIGHT;
;
L0397:	ldy     _index
	lda     #$01
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	lda     #$00
L04C6:	sta     _balls_y_direction,y
;
; index = 1;
;
L04C4:	lda     #$01
L04C5:	sta     _index
;
; balls_type[index] = SMALL_BALL;
;
	ldy     _index
	lda     #$00
	sta     _balls_type,y
;
; balls_x[index] = MIDDLE_SCREEN;
;
	ldy     _index
	lda     #$70
	sta     _balls_x,y
;
; balls_y[index] = MIDDLE_SCREEN + 40;
;
	ldy     _index
	lda     #$98
	sta     _balls_y,y
;
; balls_x_speed[index] = DEFAULT_X_SPEED;
;
	ldy     _index
	lda     #$01
	sta     _balls_x_speed,y
;
; balls_y_speed[index] = DEFAULT_Y_SPEED;
;
	ldy     _index
	sta     _balls_y_speed,y
;
; switch (get_frame_count() & 0b00000011)
;
	jsr     _get_frame_count
	and     #$03
;
; }
;
	beq     L03BB
	cmp     #$01
	beq     L03C5
	cmp     #$02
	beq     L03CF
	cmp     #$03
	beq     L03D9
	rts
;
; balls_x_direction[index] = GOING_LEFT;
;
L03BB:	ldy     _index
	lda     #$00
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	sta     _balls_y_direction,y
;
; break;
;
	rts
;
; balls_x_direction[index] = GOING_LEFT;
;
L03C5:	ldy     _index
	lda     #$00
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	lda     #$01
	sta     _balls_y_direction,y
;
; break;
;
	rts
;
; balls_x_direction[index] = GOING_RIGHT;
;
L03CF:	ldy     _index
	lda     #$01
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_DOWN;
;
	ldy     _index
	sta     _balls_y_direction,y
;
; break;
;
	rts
;
; balls_x_direction[index] = GOING_RIGHT;
;
L03D9:	ldy     _index
	lda     #$01
	sta     _balls_x_direction,y
;
; balls_y_direction[index] = GOING_UP;
;
	ldy     _index
	lda     #$00
	sta     _balls_y_direction,y
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_input_triggers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input_triggers: near

.segment	"CODE"

;
; trigger1_pulled = 0;
;
	lda     #$00
	sta     _trigger1_pulled
;
; trigger2_pulled = 0;
;
	sta     _trigger2_pulled
;
; zap1_ready = pad1_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad1_zapper
	eor     #$01
	sta     _zap1_ready
;
; zap2_ready = pad2_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad2_zapper
	eor     #$01
	sta     _zap2_ready
;
; pad1_zapper = zap_shoot(0); // controller slot 1
;
	lda     #$00
	jsr     _zap_shoot
	sta     _pad1_zapper
;
; pad2_zapper = zap_shoot(1); // controller slot 2
;
	lda     #$01
	jsr     _zap_shoot
	sta     _pad2_zapper
;
; if ((pad1_zapper == 1) && (zap1_ready) && zap1_cooldown == 0)
;
	lda     _pad1_zapper
	cmp     #$01
	bne     L04CA
	lda     _zap1_ready
	beq     L04CA
	lda     _zap1_cooldown
	bne     L04CA
;
; trigger1_pulled = 1;
;
	lda     #$01
	sta     _trigger1_pulled
;
; zap1_cooldown = MAX_COOLDOWN;
;
	lda     #$08
	sta     _zap1_cooldown
;
; if ((pad2_zapper == 1) && (zap2_ready) && zap2_cooldown == 0)
;
L04CA:	lda     _pad2_zapper
	cmp     #$01
	bne     L04CC
	lda     _zap2_ready
	beq     L04CC
	lda     _zap2_cooldown
	beq     L04CD
L04CC:	rts
;
; trigger2_pulled = 1;
;
L04CD:	lda     #$01
	sta     _trigger2_pulled
;
; zap2_cooldown = MAX_COOLDOWN;
;
	lda     #$08
	sta     _zap2_cooldown
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_zapper_hits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_zapper_hits: near

.segment	"CODE"

;
; if (trigger1_pulled == 1)
;
	lda     _trigger1_pulled
	cmp     #$01
	bne     L04CE
;
; zap1_hit_detected = zap_read(0);
;
	lda     #$00
	jsr     _zap_read
	sta     _zap1_hit_detected
;
; if (trigger2_pulled == 1)
;
L04CE:	lda     _trigger2_pulled
	cmp     #$01
	bne     L02F2
;
; zap2_hit_detected = zap_read(1); // look for light in zapper, port 2
;
	jsr     _zap_read
	sta     _zap2_hit_detected
;
; }
;
L02F2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_ball_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_ball_movement: near

.segment	"CODE"

;
; if (zap1_hit_detected == 1)
;
	lda     _zap1_hit_detected
	cmp     #$01
	bne     L04D0
;
; balls_x_direction[index] = GOING_RIGHT;
;
	ldy     _index
	sta     _balls_x_direction,y
;
; if (zap2_hit_detected == 1)
;
L04D0:	lda     _zap2_hit_detected
	cmp     #$01
	bne     L04D1
;
; balls_x_direction[index] = GOING_LEFT;
;
	ldy     _index
	lda     #$00
	sta     _balls_x_direction,y
;
; if (zap1_hit_detected == 1 || zap2_hit_detected == 1) // if it's hit update the speed
;
L04D1:	lda     _zap1_hit_detected
	cmp     #$01
	beq     L04D3
	lda     _zap2_hit_detected
	cmp     #$01
	beq     L04D3
	rts
;
; balls_x_speed[index] += DEFAULT_SPEED_STEP;
;
L04D3:	lda     #<(_balls_x_speed)
	ldx     #>(_balls_x_speed)
	clc
	adc     _index
	bcc     L02BC
	inx
L02BC:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if (get_frame_count() & 0x01 == 1)
;
	jsr     _get_frame_count
	and     #$01
	beq     L02BE
;
; balls_y_speed[index] -= DEFAULT_SPEED_STEP;
;
	lda     #<(_balls_y_speed)
	ldx     #>(_balls_y_speed)
	clc
	adc     _index
	bcc     L02C2
	inx
L02C2:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
;
; else
;
	jmp     L04CF
;
; balls_y_speed[index] += DEFAULT_SPEED_STEP;
;
L02BE:	lda     #<(_balls_y_speed)
	ldx     #>(_balls_y_speed)
	clc
	adc     _index
	bcc     L02C7
	inx
L02C7:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
L04CF:	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cooldown: near

.segment	"CODE"

;
; if (zap1_cooldown > 0)
;
	lda     _zap1_cooldown
	beq     L04D4
;
; --zap1_cooldown;
;
	dec     _zap1_cooldown
;
; if (zap2_cooldown > 0)
;
L04D4:	lda     _zap2_cooldown
	beq     L02A7
;
; --zap2_cooldown;
;
	dec     _zap2_cooldown
;
; }
;
L02A7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_box (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_box: near

.segment	"CODE"

;
; temp1 = balls_x[index];
;
	ldy     _index
	lda     _balls_x,y
	sta     _temp1
;
; temp2 = balls_y[index];
;
	ldy     _index
	lda     _balls_y,y
	sta     _temp2
;
; switch (balls_type[index])
;
	ldy     _index
	lda     _balls_type,y
;
; }
;
	beq     L03FA
	cmp     #$01
	beq     L03F6
	cmp     #$02
	bne     L03F0
;
; pointer2 = LargeBox;
;
	lda     #>(_LargeBox)
	sta     _pointer2+1
	lda     #<(_LargeBox)
;
; break;
;
	jmp     L04D5
;
; pointer2 = MediumBox;
;
L03F6:	lda     #>(_MediumBox)
	sta     _pointer2+1
	lda     #<(_MediumBox)
;
; break;
;
	jmp     L04D5
;
; pointer2 = SmallBox;
;
L03FA:	lda     #>(_SmallBox)
	sta     _pointer2+1
	lda     #<(_SmallBox)
L04D5:	sta     _pointer2
;
; oam_meta_spr(temp1, temp2, pointer2);
;
L03F0:	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _pointer2
	ldx     _pointer2+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_ball (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_ball: near

.segment	"CODE"

;
; temp1 = balls_x[index2]; // temp_x value
;
	ldy     _index2
	lda     _balls_x,y
	sta     _temp1
;
; temp2 = balls_y[index2]; // temp_y value
;
	ldy     _index2
	lda     _balls_y,y
	sta     _temp2
;
; switch (balls_type[index2])
;
	ldy     _index2
	lda     _balls_type,y
;
; }
;
	beq     L041C
	cmp     #$01
	beq     L0415
	cmp     #$02
	bne     L041C
;
; pointer2 = LargeBall;
;
	lda     #>(_LargeBall)
	sta     _pointer2+1
	lda     #<(_LargeBall)
;
; break;
;
	jmp     L04D6
;
; pointer2 = MediumBall;
;
L0415:	lda     #>(_MediumBall)
	sta     _pointer2+1
	lda     #<(_MediumBall)
;
; break;
;
	jmp     L04D6
;
; pointer2 = SmallBall;
;
L041C:	lda     #>(_SmallBall)
	sta     _pointer2+1
	lda     #<(_SmallBall)
L04D6:	sta     _pointer2
;
; oam_meta_spr(temp1, temp2, pointer2);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _pointer2
	ldx     _pointer2+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_balls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_balls: near

.segment	"CODE"

;
; offset = get_frame_count() & 3; // returns 0,1,2,3
;
	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 2;      // * 4, the size of the shuffle array
;
	asl     a
	asl     a
	sta     _offset
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	lda     #$00
	sta     _index
L04D9:	lda     _index
	cmp     #$04
	bcs     L0429
;
; index2 = shuffle_array[offset];
;
	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; index2 = index; // <-- shortcut to keep the shuffling code in if we need it
;
	lda     _index
	sta     _index2
;
; if (balls_type[index2] == TURN_OFF)
;
	ldy     _index2
	lda     _balls_type,y
	cmp     #$FF
;
; continue; // we found an empty spot
;
	beq     L04DA
;
; draw_ball();
;
	jsr     _draw_ball
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L04DA:	inc     _index
	jmp     L04D9
;
; }
;
L0429:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; set_data_pointer(level);
;
	lda     #<(_level)
	ldx     #>(_level)
	jsr     _set_data_pointer
;
; memcpy(c_map, level, 240);
;
	ldy     #$00
L0447:	lda     _level,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0447
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L04DD:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L04DC:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L04DE
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L04DC
;
; if (y == 0xe0)
;
L04DE:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L0449
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L04DD
;
; ppu_on_all();
;
L0449:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_score: near

.segment	"CODE"

;
; one_vram_buffer(player_1_score + 48, NTADR_A(3, 2));
;
	lda     _player_1_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$43
	jsr     _one_vram_buffer
;
; one_vram_buffer(player_2_score + 48, NTADR_A(26, 2));
;
	lda     _player_2_score
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$5A
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cooldown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cooldown: near

.segment	"CODE"

;
; index = 0;
;
	lda     #$00
	sta     _index
;
; temp1 = zap1_cooldown >> 2;
;
	lda     _zap1_cooldown
	lsr     a
	lsr     a
	ldx     #$00
	sta     _temp1
;
; while (index < MAX_COOLDOWN >> 2)
;
	jmp     L04E2
;
; if (index < temp1)
;
L04E1:	lda     _index
	cmp     _temp1
	txa
	sbc     #$00
	bcs     L0486
;
; one_vram_buffer('l', NTADR_A(3 + index, 26));
;
	lda     #$6C
;
; else
;
	jmp     L0504
;
; one_vram_buffer(' ', NTADR_A(3 + index, 26));
;
L0486:	lda     #$20
L0504:	jsr     pusha
	lda     _index
	clc
	adc     #$03
	bcc     L049A
	ldx     #$01
L049A:	ora     #$40
	pha
	txa
	ora     #$03
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; index += 1;
;
	inc     _index
;
; while (index < MAX_COOLDOWN >> 2)
;
	ldx     #$00
L04E2:	lda     _index
	cmp     #$02
	bcc     L04E1
;
; index = 0;
;
	stx     _index
;
; temp1 = zap2_cooldown >> 2;
;
	lda     _zap2_cooldown
	lsr     a
	lsr     a
	sta     _temp1
;
; while (index < MAX_COOLDOWN >> 2)
;
	jmp     L04E4
;
; if (index < temp1)
;
L04E3:	lda     _index
	cmp     _temp1
	txa
	sbc     #$00
	bcs     L04A5
;
; one_vram_buffer('l', NTADR_A(26 - index, 26));
;
	lda     #$6C
;
; else
;
	jmp     L0508
;
; one_vram_buffer(' ', NTADR_A(26 - index, 26));
;
L04A5:	lda     #$20
L0508:	jsr     pusha
	lda     #$1A
	sec
	sbc     _index
	pha
	txa
	sbc     #$00
	tax
	pla
	ora     #$40
	pha
	txa
	ora     #$03
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; index += 1;
;
	inc     _index
;
; while (index < MAX_COOLDOWN >> 2)
;
	ldx     #$00
L04E4:	lda     _index
	cmp     #$02
	bcc     L04E3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ trigger_pulled (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_trigger_pulled: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_mask(0x16); // BG off, won't happen till NEXT frame
;
	lda     #$16
	jsr     _ppu_mask
;
; ppu_wait_nmi(); // wait for that blank frame
;
	jsr     _ppu_wait_nmi
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; number_of_balls_active = 0;
;
	sta     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	sta     _index
L0509:	lda     _index
	cmp     #$04
	bcs     L050B
;
; if (balls_type[index] != TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
	beq     L050A
;
; ++number_of_balls_active;
;
	inc     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L050A:	inc     _index
	jmp     L0509
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L050B:	lda     #$00
	sta     _index
L050C:	lda     _index
	cmp     #$04
	bcs     L028E
;
; if (balls_type[index] == TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
;
; continue; // we found an empty spot
;
	beq     L050F
;
; oam_clear(); // clear the NEXT frame
;
	jsr     _oam_clear
;
; draw_box();  // draw a ball on the next frame
;
	jsr     _draw_box
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_zapper_hits();
;
	jsr     _read_zapper_hits
;
; if (zap1_hit_detected == 1 || zap2_hit_detected == 1)
;
	lda     _zap1_hit_detected
	cmp     #$01
	beq     L028E
	lda     _zap2_hit_detected
	cmp     #$01
	beq     L028E
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L050F:	inc     _index
	jmp     L050C
;
; update_ball_movement(); // based off zapper hit data
;
L028E:	jsr     _update_ball_movement
;
; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
;
	lda     #$1E
	jmp     _ppu_mask

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);  // load the palette
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp); // load the palette
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_vram_buffer();  // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all();    // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE) // gameloop
;
	jmp     L0510
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0247:	jsr     _ppu_wait_nmi
;
; draw_bg();
;
	jsr     _draw_bg
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; while (game_mode == MODE_TITLE) // gameloop
;
L0510:	lda     _game_mode
	beq     L0247
;
; while (game_mode == MODE_GAME) // gameloop
;
	jmp     L0514
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L024F:	jsr     _ppu_wait_nmi
;
; zap1_hit_detected = 0;
;
	lda     #$00
	sta     _zap1_hit_detected
;
; zap2_hit_detected = 0;
;
	sta     _zap2_hit_detected
;
; oam_clear();
;
	jsr     _oam_clear
;
; read_input_triggers();
;
	jsr     _read_input_triggers
;
; draw_score();
;
	jsr     _draw_score
;
; update_cooldown();
;
	jsr     _update_cooldown
;
; draw_cooldown();
;
	jsr     _draw_cooldown
;
; number_of_balls_active = 0;
;
	lda     #$00
	sta     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
	sta     _index
L0511:	lda     _index
	cmp     #$04
	bcs     L0513
;
; if (balls_type[index] != TURN_OFF)
;
	ldy     _index
	lda     _balls_type,y
	cmp     #$FF
	beq     L0512
;
; ++number_of_balls_active;
;
	inc     _number_of_balls_active
;
; for (index = 0; index < MAX_BALLS; ++index)
;
L0512:	inc     _index
	jmp     L0511
;
; if (number_of_balls_active != 0)
;
L0513:	lda     _number_of_balls_active
	beq     L026C
;
; move_balls();
;
	jsr     _move_balls
;
; draw_balls();
;
	jsr     _draw_balls
;
; if (trigger1_pulled || trigger2_pulled)
;
	lda     _trigger1_pulled
	bne     L0271
	lda     _trigger2_pulled
	beq     L0274
;
; trigger_pulled();
;
L0271:	jsr     _trigger_pulled
;
; else
;
	jmp     L0274
;
; new_ball();
;
L026C:	jsr     _new_ball
;
; gray_line();
;
L0274:	jsr     _gray_line
;
; while (game_mode == MODE_GAME) // gameloop
;
L0514:	lda     _game_mode
	cmp     #$01
	beq     L024F
;
; while (1)
;
	jmp     L0510

.endproc

